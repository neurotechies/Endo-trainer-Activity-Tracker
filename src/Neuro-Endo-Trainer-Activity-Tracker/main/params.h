#ifndef PARAMS_Included
#define PARAMS_Included
#include <string>
using namespace std;



class params
{
public:
	int PEGBOUNDINGBOX_X;
	int PEGBOUNDINGBOX_Y;
	int PEGBOUNDINGBOX_WIDTH;
	int PEGBOUNDINGBOX_HEIGHT;
	int PEGSATURATION_MINVALUE;
	int MIN_PEG_SIZE;
	double HUE_THRESHVAL_RING;
	string stationary; 
	int STABLE_COUNT;
	int IMACQ_IMGS;
	int IMACQ_CAM;
	int IMACQ_VID;
	int IMACQ_LIVESIM;
	int IMACQ_STREAM;
	double THRESHOLD;
	int LEARNING_ENABLED;
	int SHOW_OUTPUT;
	int SHOW_NOT_CONFIDENT;
	int SHOW_COLOR_IMAGE;
	int SHOW_FOREGROUND;
	int TLD_WITH_TRACKER_ONLY;
	int STATIONARY_FRAME_COUNT;
	int CONSECUTIVE_FRAME_COUNT;
	int NO_OF_IMAGES_HITTING_DETECTION;
	int HITTING_THRESHOLD;
	int SEED;
	int LOAD_MODEL;
	int EXPORT_MODEL_AFTER_RUN;
	int SAVE_OUTPUT;
	string MODEL_PATH;
	string IMACQ_VIDEO_PATH;
	string PRINT_RESULT_FILE;
	string SAVE_DIRECTORY;
	string MODEL_EXPORT_FILE;
	bool initDone;
public:

	params(){
		initDone = false;
	}
	~params(){}
	void init(FileStorage &fs)
	{
		PEGBOUNDINGBOX_X = (int)fs["PEGBOUNDINGBOX_X"];
		PEGBOUNDINGBOX_Y = (int)fs["PEGBOUNDINGBOX_Y"];
		PEGBOUNDINGBOX_WIDTH = (int)fs["PEGBOUNDINGBOX_WIDTH"];
		PEGBOUNDINGBOX_HEIGHT = (int)fs["PEGBOUNDINGBOX_HEIGHT"];
		PEGSATURATION_MINVALUE = (int)fs["PEGSATURATION_MINVALUE"];
		MIN_PEG_SIZE = (int)fs["MIN_PEG_SIZE"];
		HUE_THRESHVAL_RING = (double)fs["HUE_THRESHVAL_RING"];
		stationary = (string)fs["STATIONARY"];
		STABLE_COUNT = (int)fs["STABLE_COUNT"];
		IMACQ_IMGS = (int)fs["IMACQ_IMGS"];
		IMACQ_CAM = (int)fs["IMACQ_CAM"];
		IMACQ_VID = (int)fs["IMACQ_VID"];
		IMACQ_LIVESIM = (int)fs["IMACQ_LIVESIM"];
		IMACQ_STREAM = (int)fs["IMACQ_STREAM"];
		THRESHOLD = (double)fs["THRESHOLD"];
		LEARNING_ENABLED = (int)fs["LEARNING_ENABLED"];
		SHOW_OUTPUT = (int)fs["SHOW_OUTPUT"];
		SHOW_NOT_CONFIDENT = (int)fs["SHOW_NOT_CONFIDENT"];
		SHOW_COLOR_IMAGE = (int)fs["SHOW_COLOR_IMAGE"];
		SHOW_FOREGROUND = (int)fs["SHOW_FOREGROUND"];
		TLD_WITH_TRACKER_ONLY = (int)fs["TLD_WITH_TRACKER_ONLY"];
		STATIONARY_FRAME_COUNT = (int)fs["STATIONARY_FRAME_COUNT"];
		CONSECUTIVE_FRAME_COUNT = (int)fs["CONSECUTIVE_FRAME_COUNT"];
		NO_OF_IMAGES_HITTING_DETECTION = (int)fs["NO_OF_IMAGES_HITTING_DETECTION"];
		HITTING_THRESHOLD = (int)fs["HITTING_THRESHOLD"];
		SEED = (int)fs["SEED"];
		LOAD_MODEL = (int)fs["LOAD_MODEL"];
		EXPORT_MODEL_AFTER_RUN = (int)fs["EXPORT_MODEL_AFTER_RUN"];
		SAVE_OUTPUT = (int)fs["SAVE_OUTPUT"];
		MODEL_PATH = (string)fs["MODEL_PATH"];
		IMACQ_VIDEO_PATH = (string)fs["IMACQ_VIDEO_PATH"];
		PRINT_RESULT_FILE = (string)fs["PRINT_RESULT_FILE"];
		SAVE_DIRECTORY = (string)fs["SAVE_DIRECTORY"];
		MODEL_EXPORT_FILE = (string)fs["MODEL_EXPORT_FILE"];
		initDone = true;
	}
};



#endif